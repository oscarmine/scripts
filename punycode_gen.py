def encode_punycode(char):
    try:
        return char.encode('idna').decode('ascii')
    except:
        try:
            return 'xn--' + char.encode('punycode').decode('ascii')
        except:
            return None

homoglyphs_map = {
    'a': ['à','á','â','ã','ä','å','ɑ','А','Α','Ꭺ','Ａ','𝔄','𝕬','𝒜','𝐀','𝐴','𝘈','𝙰','𝖠','𝗔','𝘼','𝚨','𝑨','ⓐ','Ⓐ','🅐','🅰','𝔞','𝖆','𝒶','𝗮','𝘢'],
    'b': ['Ь','Ꮟ','Ƅ','ᖯ','𝐛','𝑏','𝒃','𝓫','𝔟','𝕓','𝖇','𝗯','𝘣','𝙗','𝚋'],
    'c': ['ϲ','с','ƈ','ȼ','ḉ','ⲥ','𝐜','𝑐','𝒄','𝓬','𝔠','𝕔','𝖈','𝗰','𝘤','𝙘','𝚌'],
    'd': ['ԁ','ժ','Ꮷ','𝐝','𝑑','𝒅','𝓭','𝔡','𝕕','𝖉','𝗱','𝘥','𝙙','𝚍'],
    'e': ['е','ҽ','℮','ḛ','ḝ','ẹ','é','è','ê','ë','ē','ė','ę','𝐞','𝑒','𝒆','𝓮','𝔢','𝕖','𝖊','𝗲','𝘦','𝙚','𝚎'],
    'f': ['ғ','𝐟','𝑓','𝒇','𝓯','𝔣','𝕗','𝖋','𝗳','𝘧','𝙛','𝚏'],
    'g': ['ɡ','ց','𝐠','𝑔','𝒈','𝓰','𝔤','𝕘','𝖌','𝗴','𝘨','𝙜','𝚐'],
    'h': ['һ','հ','Ꮒ','ℎ','𝐡','𝒉','𝒽','𝓱','𝔥','𝕙','𝖍','𝗵','𝘩','𝙝','𝚑'],
    'i': ['і','ɩ','Ꭵ','Ⅰ','ı','í','ì','î','ï','ī','į','𝐢','𝑖','𝒊','𝓲','𝔦','𝕚','𝖎','𝗶','𝘪','𝙞','𝚒'],
    'j': ['ј','ʝ','ϳ','𝐣','𝑗','𝒋','𝓳','𝔧','𝕛','𝖏','𝗷','𝘫','𝙟','𝚓'],
    'k': ['κ','𝐤','𝑘','𝒌','𝓴','𝔨','𝕜','𝖐','𝗸','𝘬','𝙠','𝚔'],
    'l': ['ⅼ','ӏ','Ɩ','ʟ','𝐥','𝑙','𝒍','𝓵','𝔩','𝕝','𝖑','𝗹','𝘭','𝙡','𝚕'],
    'm': ['м','ṃ','ᴍ','𝐦','𝑚','𝒎','𝓶','𝔪','𝕞','𝖒','𝗺','𝘮','𝙢','𝚖'],
    'n': ['ո','п','ռ','ṅ','ṇ','ṋ','𝐧','𝑛','𝒏','𝓷','𝔫','𝕟','𝖓','𝗻','𝘯','𝙣','𝚗'],
    'o': ['ο','օ','ӧ','ö','ó','ò','ô','õ','ō','ő','ⲟ','𝐨','𝑜','𝓸','𝔬','𝕠','𝖔','𝗼','𝘰','𝙤','𝚬'],
    'p': ['р','ρ','⍴','𝐩','𝑝','𝒑','𝓹','𝔭','𝕡','𝖕','𝗽','𝘱','𝙥','𝚭'],
    'q': ['զ','ԛ','գ','𝐪','𝑞','𝒒','𝓺','𝔮','𝕢','𝖖','𝗾','𝘲','𝙦','𝚞'],
    'r': ['ᴦ','г','ř','ȓ','ṛ','ⲅ','𝐫','𝑟','𝒓','𝓻','𝔯','𝕣','𝖗','𝗿','𝘳','𝙧','𝚛'],
    's': ['ѕ','ʂ','ṡ','ṣ','𝐬','𝑠','𝒔','𝓼','𝔰','𝕤','𝖘','𝘴','𝙨','𝚜'],
    't': ['т','τ','ṭ','ț','ⲧ','𝐭','𝑡','𝒕','𝓽','𝔱','𝕥','𝖙','𝘵','𝙩','𝚝'],
    'u': ['υ','ս','ü','ú','ù','û','ū','ⲩ','𝐮','𝑢','𝒖','𝓾','𝔲','𝕦','𝖚','𝘶','𝙪','𝚞'],
    'v': ['ν','ѵ','ⴸ','𝐯','𝑣','𝒗','𝓿','𝔳','𝕧','𝖛','𝗏','𝘷','𝙫','𝚟'],
    'w': ['ԝ','ա','ѡ','ⲱ','𝐰','𝑤','𝒘','𝔀','𝕨','𝖜','𝗐','𝘸','𝙬','𝚠'],
    'x': ['х','ҳ','ӿ','𝐱','𝑥','𝒙','𝔁','𝕩','𝖝','𝗑','𝘹','𝙭','𝚡'],
    'y': ['у','ү','ӯ','ý','ÿ','ⲩ','𝐲','𝑦','𝒚','𝔂','𝕪','𝖞','𝗒','𝘺','𝙮','𝚢'],
    'z': ['ᴢ','ż','ź','ž','𝐳','𝑧','𝒛','𝔃','𝕫','𝖟','𝗓','𝘻','𝙯','𝚣']
}

def generate_punycode_variants(letter):
    print(f"\n🔎 Punycode variants for letter: '{letter}'\n")
    letter = letter.lower()
    glyphs = homoglyphs_map.get(letter, [])
    if not glyphs:
        print("❌ No homoglyphs found for this letter.")
        return

    for glyph in glyphs:
        punycode = encode_punycode(glyph)
        if punycode:
            print(f"{glyph} -> {punycode}")

# User input
letter = input("Enter a letter (a-z): ").strip()
if len(letter) == 1 and letter.isalpha():
    generate_punycode_variants(letter)
else:
    print("❗ Please enter a single valid letter.")
